result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
set.seed(1234)
n <- 300
sizes <- rep(floor(n/7), 7)
if(n - 7*floor(n/7) > 0)
sizes[1:(n - 7*floor(n/7))] <- sizes[1:(n - 7*floor(n/7))] + 1
train_sets1 <- lapply(cumsum(sizes[-length(sizes)]), function(x) 1:x)
train_sets2 <- train_sets1[-length(train_sets1)]
test_sets1 <- lapply(data.frame(rbind(cumsum(sizes[-length(sizes)]) + 1, cumsum(sizes)[-1])), function(x) x[1]:x[2])
test_sets2 <- test_sets1[-1]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
x1muend <- 4; x2muend <- 2; x3muend <- -4; ymuend <- 3; yvarend <- 3
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of last training season:
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of first follow-up season:
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End first follow-up season:
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of second follow-up season:
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of second follow-up season:
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# if (method=="lm")
#   learner_temp <- lrn("regr.lm")
# if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
# Regular CV:
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
set.seed(1234)
n <- 300
sizes <- rep(floor(n/7), 7)
if(n - 7*floor(n/7) > 0)
sizes[1:(n - 7*floor(n/7))] <- sizes[1:(n - 7*floor(n/7))] + 1
train_sets1 <- lapply(cumsum(sizes[-length(sizes)]), function(x) 1:x)
train_sets2 <- train_sets1[-length(train_sets1)]
test_sets1 <- lapply(data.frame(rbind(cumsum(sizes[-length(sizes)]) + 1, cumsum(sizes)[-1])), function(x) x[1]:x[2])
test_sets2 <- test_sets1[-1]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
x1muend <- 2; x2muend <- 1; x3muend <- -2; ymuend <- 1.5; yvarend <- 1.5
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of last training season:
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of first follow-up season:
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End first follow-up season:
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of second follow-up season:
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of second follow-up season:
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# if (method=="lm")
#   learner_temp <- lrn("regr.lm")
# if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
# Regular CV:
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
remove.packages("diversityForest")
remove.packages("diversityForest")
install.packages("diversityForest")
library("diversityForest")
library("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
library("diversityForest")
remotes::install_github("RomanHornung/diversityForest")
library(diversityForest)
?plotPair
?plotPair
library(diversityForest)
?plotPair
?interactionfor
library(diversityForest)
?interactionfor
?plotPair
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
library("randomForestSRC")
?rfsrc
?predict.rfsrc
predict.rfsrc
sessionInfo()
?array
replicate(10, mean(((1:3) - sample(1:3))^2))
ui <- replicate(10000, mean(((1:3) - sample(1:3))^2))
max(ui)
min(ui)
table(ui)
barpot(table(ui))
barplot(table(ui))
permi <- sample(2:4)
mean(((2:4) - permi)^2)
2/3
goods <- list()
count <- 1
for(i in 1:1000) {
permi <- sample(2:4)
if(mean(((2:4) - permi)^2) == (2 + (2/3))) {
goods[[count]] <- permi
count <- count+1
}
}
/count
count
head(permi)
c("bl", "gr", "lila"))[goods[[1]]-1]
c("bl", "gr", "lila")[goods[[1]]-1]
c("bl", "gr", "lila")[goods[[2]]-1]
c("bl", "gr", "lila")[goods[[3]]-1]
c("bl", "gr", "lila")[goods[[4]]-1]
setwd("Z:/Projects/SideProjects/BlockwiseMissing/WIREs/FirstRevision/Code/bwm_article")
# 1-2 Define a list with the paths to the availabe DFs
df_paths <- paste0("./compstudy_code_and_results/data/", list.files("./compstudy_code_and_results/data/"))
df_paths
list.files("./compstudy_code_and_results/data/")
# 1-2 Define a list with the paths to the availabe DFs
filelist <- list.files("./compstudy_code_and_results/data/")
df_paths <- paste0("./compstudy_code_and_results/data/", filelist)
df_paths
clinblocks <- list()
load(df_paths[13])
ls()
dim(clin)
head(clin)
clinblocks <- list()
for(i in seq(along=df_paths)) {
load(df_paths[i])
clinblocks[[i]] <-  clin
cat("\n")
cat("\n")
cat("\n")
cat(paste0("Dataset: ", i), "\n")
cat("\n")
cat("\n")
cat("\n")
}
sapply(clinblocks, dim)
5000*0.05
df_paths
lapply(clinblocks, names)
unlist(lapply(clinblocks, names))
table(unlist(lapply(clinblocks, names)))
sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE)
filelist
gsub(".Rda", "", filelist)
paste(gsub(".Rda", "", filelist), collapse=", ")
clinblocks
lapply(clinblocks, names)
sapply(clinblocks, function(x) paste(names(x), collapse=", "))
paste0(paste(gsub(".Rda", "", filelist), collapse=", "), ": ", sapply(clinblocks, function(x) paste(names(x), collapse=", ")))
sapply(1:13, function(x) paste0(paste(gsub(".Rda", "", filelist)[x], collapse=", "), ": ", sapply(clinblocks, function(x) paste(names(x), collapse=", "))[x]))
ui <- sapply(1:13, function(x) paste0(paste(gsub(".Rda", "", filelist)[x], collapse=", "), ": ", sapply(clinblocks, function(x) paste(names(x), collapse=", "))[x]))
ui
for(i in seq(along=ui))
cat(ui[i], "\n")
names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE))
load(df_paths[2])
clin$race
clin$gender
clin$er_status
clin$pr_status
clin$age
boxplot(clin$age ~ clin$race)
t.test(clin$age ~ clin$race)
ui
library(TCGAbiolinks)
library(SummarizedExperiment)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(SummarizedExperiment)
#----- clinical data -----#
clin.query <- GDCquery(project = "TCGA-BLCA", data.category = "Clinical")
json  <- tryCatch(GDCdownload(clin.query),
error = function(e) GDCdownload(clin.query, method = "client"))
#----- clinical data -----#
clin.query <- GDCquery(project = "TCGA-BLCA",
data.category = "Clinical",
data.type = "Clinical Supplement")
# Download the data
json <- tryCatch(GDCdownload(clin.query),
error = function(e) GDCdownload(clin.query, method = "client"))
clinical <- GDCprepare_clinic(clin.query, clinical.info = "patient")
clincal
clinical
#----- clinical data -----#
clin.query <- GDCquery(project = "TCGA-BLCA", data.category = "Clinical")
clinical <- GDCprepare_clinic(clin.query, clinical.info = "patient")
# Download the clinical data
GDCdownload(clin.query)
?GDCquery
clinical <- TCGAbiolinks::GDCquery_clinic(project = "TCGA-BLCA", type = "clinical")
class(clinical)
dim(clinical)
clinical$race
table(clinical$race)
names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE))
ui
clinical <- TCGAbiolinks::GDCquery_clinic(project = "TCGA-BRCA", type = "clinical")
names(clinical)
names(clinical)[apply(clinical, function(x) length(grep("T1", x))>0)]
names(clinical)[apply(clinical, 2, function(x) length(grep("T1", x))>0)]
clinical$ajcc_pathologic_t
table(clinical$ajcc_pathologic_t)
table(clinical$ajcc_pathologic_n)
names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE))
table(clinical$ajcc_pathologic_m)
sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE)
barplot(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE))
df_paths
load("./compstudy_code_and_results/data/LUSC.Rda")
ls()
head(targetvar)
aha <- cbind(targetvar, clin)
aha$smokerstatus <- "Other"
aha$smokerstatus[aha$smoking_longer15] <- "abstlonger15"
aha$smokerstatus[aha$smoking_shorter15] <- "abstshorter15"
table(aha$smokerstatus)
table(aha$smoking_longer15)
aha$smokerstatus <- "Other"
aha$smokerstatus[aha$smoking_longer15==1] <- "abstlonger15"
aha$smokerstatus[aha$smoking_shorter15==1] <- "abstshorter15"
table(aha$smokerstatus)
km.5 <- survfit(Surv(time, status) ~ smokerstatus, data=aha)
library("survival")
km.5 <- survfit(Surv(time, status) ~ smokerstatus, data=aha)
ggsurvplot(km.5, pval=TRUE)
library("survminer")
install.packages("survminer")
library("survminer")
# install.packages("survminer")
ggsurvplot(km.5, pval=TRUE)
filelist
datanames <- gsub(".Rda", "", filelist)
datanames
paste(names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE)), collapse="\", \")
)
)
""
paste(names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE)), collapse="\", \"")
cat(paste(names(sort(table(unlist(lapply(clinblocks, names))), decreasing=TRUE)), collapse="\", \""), "\n")
datanames <- gsub(".Rda", "", filelist)
varnames <- c("age", "gender", "race", "T_positive", "N_positive",
"M_positive", "er_status", "pr_status", "her2_positive",
"her2_equivocal", "smoking_longer15", "smoking_shorter15")
varname
varnames
avmat <- matrix(nrow=length(datanames), ncol=length(varnames))
avmat <- matrix(nrow=length(datanames), ncol=length(varnames), data=0)
avmat
datanames <- gsub(".Rda", "", filelist)
varnames <- c("age", "gender", "race", "T_positive", "N_positive",
"M_positive", "er_status", "pr_status", "her2_positive",
"her2_equivocal", "smoking_longer15", "smoking_shorter15")
avmat <- matrix(nrow=length(datanames), ncol=length(varnames), data=0)
avmat <- matrix(nrow=length(datanames), ncol=length(varnames), data=0)
for(i in seq(along=datanames)) {
for(j in seq(along=varnames)) {
if(varnames[j] %in% names(clinblocks[[i]]))
avmat[i,j] <- 1
}
}
avmat
rownames(avmat) <- datanames
colnames(avmat) <- varnames
avmat
getwd()
library("xtable")
print(xtable(avmat, type = "latex"), include.rownames=FALSE,
file = "./evaluation_code_and_results/figures_and_table1/supptableclin.tex")
# Create a data.frame
df <- data.frame(A = 1:5, B = 6:10, C = 11:15)
# Create a new variable
new_var <- 16:20
# Add the new variable as the first column in the data.frame
df <- cbind(NewVar = new_var, df)
# Print the updated data.frame
print(df)
avmat <- cbind(label=datanames, avmat)
library("xtable")
print(xtable(avmat, type = "latex"), include.rownames=FALSE,
file = "./evaluation_code_and_results/figures_and_table1/supptableclin.tex")
colSums(avmat[,-1])
colSums(as.numeric(avmat[,-1]))
fix(avmat)
names(avmat)
avmat <- matrix(nrow=length(datanames), ncol=length(varnames), data=0)
for(i in seq(along=datanames)) {
for(j in seq(along=varnames)) {
if(varnames[j] %in% names(clinblocks[[i]]))
avmat[i,j] <- 1
}
}
rownames(avmat) <- datanames
colnames(avmat) <- varnames
avmat <- cbind(label=datanames, avmat)
avmat
avmat <- avmat[,1:7]
avmat
library("xtable")
print(xtable(avmat, type = "latex"), include.rownames=FALSE,
file = "./evaluation_code_and_results/figures_and_table1/supptableclin.tex")
